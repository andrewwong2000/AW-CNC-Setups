function OnAbout(event)
   ctrl = event:GetTextCtrl()
   ctrl:AppendText("Mach3 plasma post processor\n")
   ctrl:AppendText("\n")
   ctrl:AppendText("Plasma post for machines with NEURON.THC\n")
   ctrl:AppendText("\n")
   ctrl:AppendText("Modal G-codes and coordinates\n")
   ctrl:AppendText("Comments enclosed with ( and )\n")
   ctrl:AppendText("M03/M05 turn the torch on/off\n")
   ctrl:AppendText("(not is use) M205/M206 turn the THC on/off\n")
   ctrl:AppendText("Incremental IJ\n")
end

function OnInit()

   post.SetCommentChars ("()", "[]")  --make sure ( and ) characters do not appear in system text
   post.Text (" (Filename: ", fileName, ")\n")
   post.Text (" (Post processor: ", postName, ")\n")
   post.Text (" (Date: ", date, ")\n")
   if(scale == metric) then
      post.Text (" G21 (Units: Metric)\n") --metric mode
   else
      post.Text (" G20 (Units: Inches)\n") --inch mode
   end
   post.Text (" G53 G90 G91.1 G40\n F1\n S500\n")
   bigArcs = 50 --stitch arc segments together
   minArcSize = 0.1 --arcs smaller than this are converted to moves
   thcOnCode = " M10.2 (Post AVC On)" -- THC On
   thcOffCode = " M11.2 (Post AVC Off)" -- THC Off
   thcstate = 0
   ThcOn() --sets THC on at beginning
end

function OnNewLine()
   post.Text ("N")
   post.Number (lineNumber, "0000")
   lineNumber = lineNumber + 10
end


function OnFinish()
   post.Text (" M05 M30\n")
end

function OnRapid()
   if(math.hypot(currentX - endX, currentY - endY) < 0.001) then return end
   post.ModalText (" G00")
   post.ModalNumber (" X", endX * scale, "0.0000")
   post.ModalNumber (" Y", endY * scale, "0.0000")
   post.Eol()
end

function OnMove()
   if(math.hypot(currentX - endX, currentY - endY) < 0.001) then return end
   post.ModalText (" G01")
   post.ModalNumber (" X", endX * scale, "0.0000")
   post.ModalNumber (" Y", endY * scale, "0.0000")
   post.ModalNumber (" F", feedRate * scale, "0.0###")
   post.Eol()
end

function OnArc()
   if(arcAngle <0) then
      post.ModalText (" G03")
   else
      post.ModalText (" G02")
   end
   post.NonModalNumber (" X", endX * scale, "0.0000")
   post.NonModalNumber (" Y", endY * scale, "0.0000")
   post.Text (" I")
   post.Number ((arcCentreX - currentX) * scale, "0.0000")
   post.Text (" J")
   post.Number ((arcCentreY - currentY) * scale, "0.0000")
   post.ModalNumber (" F", feedRate * scale, "0.0###")
   post.Eol()
end


function OnPenDown()
   post.Text (" M03 (Post Torch ON)\n") 
   -- post.Text (" M10.2 (AVC ON)\n") 

   if(thcstate == 0) then
      post.Text(thcOffCode)
   end
end


function OnPenUp()
   -- post.Text (" M11.1 (Post Torch OFF Synchronous)\n") 
   post.Text (" M05 (Post Torch OFF)\n")
end


function OnNewOperation()
   post.Text (" (Operation: ", operationName, ")\n")
end

function OnComment()
  post.Text(" (",commentText,")\n")
end

function OnToolChange()
end

function OnNewPart()
   post.Text(" (Part: ",partName,")\n");
end

function OnDrill()
   if toolClass == "PlasmaTool" then 
      OnRapid()
	  post.Text (" M405 (Post Plasma Mark)\n ")
   else
      OnRapid()
      OnPenDown()
      OnMove()
      OnPenUp()
      OnRapid()
   end
end

function ThcOff()
   if(not thcOffCode) then return end -- ThcOffCode = nil (i.e. don't use THC)
   if(thcstate == 1) then
      thcstate = 0      
      post.Text(thcOffCode)
   end
end

function ThcOn()
   if(not thcOnCode) then return end -- ThcOnCode = nil (i.e. don't use THC)
   if(thcOff == 0) then return end -- THC not required by operation
   if(toolClass == "MarkerTool") or (toolClass == "DrillTool") then return end
   if(thcstate == 0) then
      thcLockstate = 0
      thcstate = 1
      post.Text(thcOnCode)
      return
   end
end
